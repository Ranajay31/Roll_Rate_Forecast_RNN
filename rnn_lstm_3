import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense


def load_data(file_path):
    """
    Load the data from a csv file and return as a Pandas DataFrame.
    Assumes the data column is in the format dd/mm/yyyy.
    """
    df = pd.read_csv(file_path)
    df['date'] = pd.to_datetime(df['date'], format='%d/%m/%Y')
    df = df.set_index('date')
    return df


def prepare_data(data, lookback):
    """
    Prepare the data for LSTM model training and prediction.
    Scales the data and creates rolling windows of length 'lookback'.
    """
    # Scale the data using MinMaxScaler
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    # Create rolling windows of length 'lookback'
    X = []
    y = []
    for i in range(lookback, len(data)):
        X.append(scaled_data[i-lookback:i, 0])
        y.append(scaled_data[i, 0])
    X, y = np.array(X), np.array(y)

    # Reshape X to match LSTM input shape [samples, time steps, features]
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))

    return X, y, scaler


def build_lstm_model(X, y):
    """
    Build and train an LSTM model using the provided data.
    """
    # Define the LSTM model architecture
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))

    # Compile the model
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    model.fit(X, y, epochs=100, batch_size=32)

    return model


def generate_lstm_predictions(model, scaler, lookback, periods):
    """
    Generate predictions for the next 'periods' months using the trained LSTM model.
    """
    # Generate the initial input sequence for prediction
    last_data = np.array(data.tail(lookback))
    last_data = scaler.transform(last_data)
    last_data = np.reshape(last_data, (1, lookback, 1))

    # Generate predictions for the next 'periods' months
    predictions = []
    for i in range(periods):
        prediction = model.predict(last_data)
        predictions.append(prediction[0, 0])
        last_data = np.append(last_data[:, 1:, :], [[prediction]], axis=1)

    # Inverse transform the scaled predictions to the original scale
    predictions = scaler.inverse_transform(np.array(predictions).reshape(-1, 1))

    return predictions


# Load the data
file_path = 'path/to/data.csv'
data = load_data(file_path)

# Prepare the data for LSTM model training and prediction
lookback = 12
X, y, scaler = prepare_data(data, lookback)

# Build and train an LSTM model
model = build_lstm_model(X, y)

# Generate predictions for the next 12, 18, and 60 months
predictions_12 = generate_lstm_predictions(model, scaler, lookback=lookback, periods=12)

