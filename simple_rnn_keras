import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN

# Load the data into a pandas DataFrame
data = pd.read_csv("path/to/data.csv")

# Convert the date column to a datetime format
data["date"] = pd.to_datetime(data["date"], format="%b-%Y")

# Set the date column as the index of the DataFrame
data.set_index("date", inplace=True)

# Define a function to preprocess the data and split it into input and output sequences
def preprocess_data(data, n_steps_in, n_steps_out):
    # Scale the data using a MinMaxScaler
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    # Split the scaled data into input and output sequences
    X, y = [], []
    for i in range(len(scaled_data)):
        end_ix = i + n_steps_in
        out_end_ix = end_ix + n_steps_out
        if out_end_ix > len(scaled_data):
            break
        seq_x, seq_y = scaled_data[i:end_ix], scaled_data[end_ix:out_end_ix]
        X.append(seq_x)
        y.append(seq_y)
    X, y = np.array(X), np.array(y)

    # Reshape the input sequences into a 3D format for input to an RNN
    X = X.reshape((X.shape[0], X.shape[1], 1))

    return X, y, scaler

# Define the input and output sequence lengths and the number of features (always 1 for univariate time series)
n_steps_in = 12 # Length of input sequence (12 months)
n_steps_out_1 = 12 # Length of output sequence for 12-month prediction
n_steps_out_2 = 18 # Length of output sequence for 18-month prediction
n_steps_out_3 = 60 # Length of output sequence for 60-month prediction
n_features = 1 # Always 1 for univariate time series

# Preprocess the data for each prediction horizon
X_train_1, y_train_1, scaler = preprocess_data(data["roll_rates"], n_steps_in, n_steps_out_1)
X_train_2, y_train_2, _ = preprocess_data(data["roll_rates"], n_steps_in, n_steps_out_2)
X_train_3, y_train_3, _ = preprocess_data(data["roll_rates"], n_steps_in, n_steps_out_3)

# Define the RNN model architecture
model = Sequential()
model.add(SimpleRNN(50, activation='relu', input_shape=(n_steps_in, n_features)))
model.add(Dense(n_steps_out_1))
model.compile(optimizer='adam', loss='mse')

# Fit the model on the entire dataset
model.fit(X_train_1, y_train_1, epochs=100, verbose=0)

# Generate predictions for the next 12 months
last_month = data.index[-1]
next_12_months = pd.date_range(last_month, periods=n_steps_out_1+1, freq='MS')[1:]
last_sequence = data.tail(n_steps_in).values.reshape((1, n_steps_in, n_features))
predicted_12_month = []
for i in range(n_steps_out_1):
    next_pred = model.predict(last_sequence)[0]
    predicted_12_month.append(next_pred)
    last_sequence = np
